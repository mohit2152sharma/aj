name: Build and Deploy Observability App

on:
    push:
        branches: [main, develop]
        paths:
            - "observability/**"
    pull_request:
        branches: [main]
        paths:
            - "observability/**"

env:
    PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
    GAR_LOCATION: asia-south1
    SERVICE: observability
    REGISTRY_NAME: dev-opentelemetry
    GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}

jobs:
    deploy:
        permissions:
            contents: read
            id-token: write

        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Google Auth
              id: auth
              uses: "google-github-actions/auth@v2"
              with:
                  credentials_json: "${{ secrets.GCP_SA_KEY }}"

            - name: Docker Auth
              id: docker-auth
              uses: "docker/login-action@v3"
              with:
                  registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
                  username: _json_key
                  password: ${{ secrets.GCP_SA_KEY }}

            - name: Build and Push Container
              run: |-
                  docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_NAME }}/${{ env.SERVICE }}:${{ github.sha }}" ./observability/
                  docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_NAME }}/${{ env.SERVICE }}:${{ github.sha }}"

                  # Also tag as latest for main branch
                  if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
                    docker tag "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_NAME }}/${{ env.SERVICE }}:${{ github.sha }}" "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_NAME }}/${{ env.SERVICE }}:latest"
                    docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_NAME }}/${{ env.SERVICE }}:latest"
                  fi

            - name: Setup gcloud CLI
              uses: google-github-actions/setup-gcloud@v2
              with:
                  project_id: ${{ env.PROJECT_ID }}

            - name: Get GKE credentials
              run: |-
                  gcloud container clusters get-credentials "${{ env.GKE_CLUSTER }}"

            - name: Deploy to GKE
              run: |-
                  # Create namespace if it doesn't exist
                  kubectl apply -f ./observability/k8s/namespace.yaml

                  # Update image in deployment manifest
                  sed -i "s|PROJECT_ID|${{ env.PROJECT_ID }}|g" ./observability/k8s/deployment.yaml
                  sed -i "s|:latest|:${{ github.sha }}|g" ./observability/k8s/deployment.yaml

                  # Check if deployment exists
                  if kubectl get deployment observability -n observability &> /dev/null; then
                    echo "Deployment exists, updating image and rolling out..."
                    kubectl set image deployment/observability observability=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REGISTRY_NAME }}/${{ env.SERVICE }}:${{ github.sha }} -n observability
                    kubectl rollout restart deployment/observability -n observability
                    kubectl rollout status deployment/observability -n observability
                  else
                    echo "Deployment doesn't exist, applying manifests..."
                    kubectl apply -f ./observability/k8s/ -n observability
                    kubectl rollout status deployment/observability -n observability
                  fi

            - name: Get Service Info
              run: |-
                  echo "Getting service information..."
                  kubectl get services -n observability
                  kubectl get ingress -n observability
